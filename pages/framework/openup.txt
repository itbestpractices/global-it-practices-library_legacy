
===== Open Unified Process (OpenUP) =====

The Open Unified Process (OpenUP) is a component of the Eclipse Process Framework (EPF)//[[:general:glossary|glossary]]//, an open source process framework developed within the Eclipse Foundation((http://www.eclipse.org/)) (a not-for-profit, organization that acts as the steward of Eclipse, an open source community focused on building an open development platform made of extensible frameworks, tools and runtimes for developing, implementing and managing the software lifecycle stages). OpenUP is a lean Unified Process that uses iterative and incremental approaches in a structured lifecycle. It adopts a pragmatic and agile philosophy that emphasizes on the collaborative nature of software development. OpenUP is a tools-agnostic, low-ceremony process that can address a wide variety of project types.

==== Core Principles of OpenUP ====
OpenUP is based on the following four key principles:
1.	Collaboration for aligning interests and sharing understanding – It promotes the practices that allow a healthy team environment to thrive by the effective collaboration and shared understanding of the project processes
2.	Balancing of Competing Priorities to Maximize the Stakeholder Value – It promotes the practices that allow the project participants to develop a solution that maximizes the value of the stakeholders and which is compliant with the constraints placed on the project
3.	Focus on Architecture to Minimize the Risks and Organize Developments
4.	Evolve to Continuously get Feedback and Improve 

==== Organization of OpenUP ====
OpenUP is organized in 2 different but correlated dimensions: method content and process content. The method content is where method elements i.e. the roles, tasks, artifacts, and guidance are defined, regardless of how they are used in a project lifecycle. The process content is where the method elements are used in the temporal sense. The OpenUP method content is based on the following disciplines: Requirements, Development, Test, Project Management, Architecture and Configuration & Change Management.
OpenUP is made of three different layers: 
1.	Micro-Increments – They represent the short units of work that result in a steady, measurable pace of project progress (usually measured in hours or days). This process of dividing the stages in micro-increments applies to intensive collaboration as the system is incrementally prepared by a committed, self-organized team. The micro-increments offer an extremely short feedback loop that drives adaptive decisions in each iteration stage
2.	Iteration Lifecycle - OpenUP divides a project into iterations that are planned, time-boxed intervals typically measured in weeks. The iterations focus on delivering incremental value to stakeholders in a predictable manner. The iteration plan formulates what should be delivered within the iteration. OpenUP applies an iteration lifecycle that structures on how the micro-increments are used to deliver stable, cohesive builds of the system that incrementally meets the iteration objectives
3.	Project Lifecycle - OpenUP structures a project lifecycle into four phases: Inception, Elaboration, Construction, and Transition. The project lifecycle provides the stakeholders and team members with the advantages of visibility and decision points throughout the project. This results in effective oversight, and easy "go or no-go" decisions at appropriate times. The project plan defines the lifecycle with the outcome as the released application
The layers have been shown below:

{{ :openup_1.png?nolink |}}

 
==== Roles in OpenUP ====

The essential skills that are needed by the small and co-located teams are represented by the following OpenUP roles:
1.	Stakeholder – This role represents the interest groups whose needs must be satisfied by the project. It is a role that may be played by anyone who is actually or potentially financially affected by the outcome of the project
2.	Analyst – This represents the customer and end-user concerns by gathering input from stakeholders to understand the problems and by setting the priorities for requirements
3.	Architect – This role is responsible for designing the software architecture and also for making the key technical decisions that affect the design and implementation of the project
4.	Developer – This role is responsible for developing a part of the system, including designing it to fit into the solution architecture, and then deploying , unit-testing, and integrating the components that are part of the solution
5.	Tester – This role is responsible for the core activities of the test effort, such as identifying, defining, implementing, and performing the necessary tests, and logging the results of the testing and analyzing the results
6.	Project Manager – This role leads the planning of the project in collaboration with stakeholders and team, coordinates the interactions with stakeholders, and keeps the project team prioritized on meeting the project objectives

{{ :openup_2.png?nolink |}}


 