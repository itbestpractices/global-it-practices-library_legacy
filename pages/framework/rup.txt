
===== Rational Unified Process (RUP) =====

The Rational Unified Process (RUP) is an iterative software development process framework//[[:general:glossary|glossary]]// that was developed by the Rational Software Corporation, (a business division of IBM since its acquisition in 2003)((http://www-01.ibm.com/software/rational/)). RUP is an adaptable process framework that is intended to be customized by the development organizations and the software project teams that select the elements of the process appropriate for their needs. Rational Unified Process (RUP) is a comprehensive framework for processes that provides some of the industry-tested practices for software and systems delivery and for efficient project management. It is a specific case for the deployment of the Unified Process and it is one of the many processes that are contained within the Rational Process Library//[[:general:glossary|glossary]]// which offers the best practices guidance to meet a particular development or project need. IBM’s Rational Method Composer//[[:general:glossary|glossary]]// allows a user to conveniently customize the RUP and meet the unique needs of the project. The Rational Method Composer enables a user to choose and implement only the process components//[[:general:glossary|glossary]]// that are needed, and then to publish them through the intranet.
The Rational Unified Process (RUP) is a Software Engineering Process that provides a disciplined approach for assigning the tasks and responsibilities in a development organization. The key objective of RUP is to ensure that the production of high-quality software solutions meets the requirements of the end-users within a predictable schedule and budget. RUP helps to enhance team productivity, by providing every team member with an easy access to a knowledge base with the guidelines, templates and tool mentors for the critical software development activities. RUP helps to maintain that all team members share a common language, process and view of how to develop software, as they have the access to the same knowledge base, even if they work with different requirements, design, test, project management, or configuration management sets. RUP activities also help to create and maintain process models. Rather than focusing on the use of a large amount of paper documents, the Unified Process focuses on the development and maintenance of models that are semantically rich representations of the evolving software system. Rational Unified Process also guides on the effective utilization of the Unified Modeling Language (UML).
The RUP is supported by various tools that can be designed to automate large parts of the process. The tools are used to develop and maintain the various models of the software engineering process, such as visual modeling, programming, testing, etc. The tools are an invaluable part for supporting all the bookkeeping associated with the change management as well as the configuration management processes that accompany each of the iteration stages. The Rational Unified Process is a configurable process and it is suitable for small software development teams as well as large development organizations. The RUP is based on simple and clear process architecture and it provides a common platform across a family of processes. Yet, the RUP is flexible and it can be changed to accommodate the demands of different situations. The Rational Unified Process accommodates many of the best practices followed in modern software development in a form that is useful for a diverse range of projects and organizations. 

RUP is based on a set of building blocks, or content elements, that describe what is to be produced, the skills required for the process and the step-by-step explanation describing how the specific development goals are to be achieved within the organization. Within each iteration stage, the tasks are categorized in to ‘Engineering Disciplines’ (Business Modeling; Requirements; Analysis and Design; Implementation; Test; Deployment) and ‘Supporting Disciplines’ (Configuration and Change Management; Project Management; Environment).

==== Six ‘Best Practices’ of RUP ====
The Rational Unified Process offers guidance on the effective deployment of commercially proven approaches to software development. These approaches are called ‘best practices’ as they are commonly used by successful organizations in the industry. The Rational Unified Process provides the guidelines, templates and tool mentors required for the entire software development team to take full advantage of the following best practices:
1.	Develop iteratively, with risk as the primary iteration driver - The RUP supports an iterative approach for software development that addresses the highest risk items at every stage in the lifecycle, thereby considerably reducing a project’s risk profile. This approach helps to prevent risk through demonstrable progress frequent, executable releases that enable continuous end user involvement and feedback. As the iterations end with an executable release, the development team stays focused on producing results, and frequent status checks help ensure that the project stays on schedule. An iterative approach also makes it more convenient to accommodate tactical changes in requirements, features or schedule
2.	Manage requirements – RUP describes how to elicit, organize, and document the required functionality and constraints; and easily capture and communicate business requirements. The use case and scenarios laid down in the RUP process are an excellent way to capture functional requirements of a project and to make it more likely that the final system fulfil the end user needs by better design, implementation and testing of software. It helps to provide coherent and traceable threads through the development and the delivered system
3.	Employ a component-based architecture – RUP supports a component-based software development approach. The Rational Unified Process provides a systematic approach for defining a software architecture using the new and existing components
4.	Model software visually – It allows a user to hide the details and write the code using graphical building blocks. Visual abstractions also help to communicate the different aspects of software and visualize how the elements of the system fit together. It helps to make sure that the building blocks of software are consistent with the code; maintain consistency between a design and its implementation; and promote unambiguous communication. It helps to hide the details and write code using graphical building blocks and as such Visual abstractions enables the users to: effectively communicate the different aspects of the software; ensure that the building blocks are consistent with the code;  visualize how the elements of the system fit together; maintain consistency between a design and the implementation; and promote unambiguous communication among the developers
5.	Verify software quality – RUP helps in the stages of planning, design, implementation, execution, and evaluation of the test types. Quality assessment is inherently aligned with the process, in all activities, involving all participants by using objective measurements criteria
6.	Control software changes – RUP describes the process of controlling, tracking and monitoring changes to enable successful iterative development. It also guides on the establishment of secure workspaces for each developer by helping in the isolation from changes made in other workspaces and by controlling changes of all software aspects

==== Four Project Lifecycle Phases ====
The RUP has outlined a project life cycle in four phases (Inception, Elaboration, Construction and Transition). These four phases enable the process to be presented at a high level in a similar fashion as the 'waterfall'-styled project. Each phase is concluded with a well-defined milestone, which is a point in time where certain critical decisions must be made, and therefore key objectives of the phase must be met. The visualization of RUP phases and the disciplines over time is referred to as the RUP hump chart and it has been given below:

{{ :rup.png?nolink |}}

 
Each of the four phases has been described below:
1.	Inception Phase –During this phase, the user establishes the business case for the system and delimits the project scope. The user must identify all the external entities with which the system will interact (or the actors) and clearly define the nature of this interaction at a high-level. It pertains to the identification of all use cases and description of the few significant ones. The business case comprises of success criteria, risk assessment, and estimates of the resources needed, and a phase plan that shows the dates of major milestones. Some of the outcomes of this phase are: vision document; initial use-case model; initial project glossary; initial business case; initial risk assessment; project plan; business model; and one or several types of the prototypes
2.	Elaboration Phase – The purpose of this phase is to analyze the problem domain, establish a sound architectural foundation, develop the project plan, and avoid the highest risk elements of the project. In this elaboration phase, an executable architecture prototype is developed in the form of one or more iterations, depending on the scope, size, risk, and novelty of the project so as to address the critical use cases identified in the inception phase
3.	Construction Phase – During this phase, all the remaining components and application features are made and they are integrated into the product, with all features being thoroughly tested. It is in one sense, a manufacturing process where emphasis is given on managing resources and controlling operations to optimize costs, schedules, and quality
4.	Transition Phase – The purpose of this phase is to successfully transition the software product to the user community. In general the phase includes several iterations, like beta releases, general availability releases, as well as bug-fix and product enhancement releases
