<wrap hide>
  <revision_frequency>30</revision_frequency>
</wrap>

/* More information on what to specify as part of each section, please refer to [[:contribute:do_work:guidelines|Writing Guidelines]] */

====== Refactor Code ======

---- dataentry practices ----
type               : practice
name               : refactor code
tag                : development
responsible_pages  : :role:developer
accountable_pages  : :role:technical project lead
consulted_pages    : :role:developer
informed_pages     : 
maturity_area      : developing
maturity_level     : beginner
artefact_pages     : 
tool_pages         : :tool:version control system
prerequisites_pages: :practice:version control
----

From [[https://en.wikipedia.org/wiki/Code_refactoring|Wikipedia]]:

Code refactoring is a "disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behavior", undertaken in order to improve some of the nonfunctional attributes of the software. Advantages include improved code readability and reduced complexity to improve the maintainability of the source code, as well as a more expressive internal architecture or object model to improve extensibility.

  By continuously improving the design of code, we make it easier and easier to
  work with. This is in sharp contrast to what typically happens: little 
  refactoring and a great deal of attention paid to expediently adding new
  features. If you get into the hygienic habit of refactoring continuously, 
  you'll find that it is easier to extend and maintain code.
  Joshua Kerievsky, Refactoring to Patterns 

Typically, refactoring is done by applying a series of standardised basic "micro-refactorings", each of which is a (usually) tiny change in a computer program's source code that either preserves the behaviour of the software or at least does not modify its conformance to functional requirements. Many development environments provide automated support for carrying out the mechanical aspects of these basic refactorings.

==== Also Known as ====

==== Artefacts ====

---- datatable ----
cols      : Name, %pageid%
headers   : Name, Details
filter    : type=artefact
filterand : practice_pages=practice:refactor code
sort      : name
----

==== Problems that are addressed by this practice ====

==== The benefits of applying this IT Best Practice ====

==== The consequences or risks of not applying this IT Best Practice ? ====

==== Pre-Requisites  ====

---- datatable ----
cols      : Name, %pageid%
headers   : Name, Details
filter    : type=practice
filterand : prerequisites_pages=practice:refactor code
sort      : name
----

==== Training and Coaching  ====

Help and coaches with standards: [[http://www.sparklingit.com.au/training]]

---- datatable ----
cols      : Name, %pageid%
headers   : Name, Details
filter    : type=training
filterand : practice_pages=practice:refactor code
sort      : name
----

==== Processes ====

---- datatable ----
cols      : Name, %pageid%
headers   : Name, Details
filter    : type=process
filterand : practice_pages=practice:refactor code
sort      : name
----

==== Effort ====

==== Do's and Don'ts ====

  * DO: .....
  * DO: .....
  * DO: .....
  * DON't: .....
  * DON't: .....
  * DON't: .....

==== Continue Reading: ====

{{keywords>IT Efficiency, IT best practices, the SDLC, IT Standards}}
{{description>This standards library has been compiled by the ALM Community. It is based on IT best practices, increasing your IT Efficiency considerably across the SDLC}}
